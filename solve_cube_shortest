import random
import numpy as np
import cv2
import time
from matplotlib.pyplot import plot
import pandas as pd
import os
from cube_model import Rcube
import math

initial_state = {'up': np.array(['o', 'b', 'g', 'r']),
                 'left': np.array(['y', 'w', 'b', 'w']),
                 'front': np.array(['g', 'o', 'g', 'w']),
                 'right': np.array(['y', 'w', 'b', 'r']),
                 'down': np.array(['o', 'y', 'r', 'g']),
                 'back': np.array(['o', 'y', 'r', 'b'])
                 }

perspective_moves_all = (['uyl', 'dyl'] + ['frr', 'brr'] * 4 + ['rpu', 'lpu'] + ['frr', 'brr'] * 4) * 3

rubik_cube = Rcube(initial_state)
rubik_cube.scramble_up(50)
state_mode = 'pattern'
# q_table = pd.read_pickle('q_table.pkl')
q_table = pd.read_pickle('q_table_max.pkl')

max_count = 10000
count = 0
while not (rubik_cube.faces_solved() == 6 or count > max_count):

    max_val = 0
    max_val_i = -1
    for i, move in enumerate(perspective_moves_all):
        rubik_cube.orient(move)
        if i % 2 == 1:
            present_state = rubik_cube.state_string(state_mode)
            if not q_table[q_table['state'] == present_state].empty:
                if q_table.loc[q_table['state'] == present_state, :].values[0][1:].max() > max_val:
                    max_val = q_table.loc[q_table['state'] == present_state, :].values[0][1:].max()
                    max_val_i = i

    if max_val_i != -1:
        for i, move in enumerate(perspective_moves_all):
            if i <= max_val_i:
                rubik_cube.orient(move)

        present_state = rubik_cube.state_string(state_mode)
        a = q_table.loc[q_table['state'] == present_state, :].values[0].tolist()[1:]
        present_move_table = rubik_cube.moves[a.index(max(a))]

    else:
        present_move_table = random.choice(rubik_cube.moves)

    # ------------------ ORIENT CUBE -------------------------------------------------------------
    print(rubik_cube.state['front'])
    rubik_cube.paint_cube(1)
    rubik_cube.orient(present_move_table)
    print("step = {}, move = {}".format(count, present_move_table))
    rubik_cube.paint_cube(1)


    count += 1

rubik_cube.paint_cube(0)
print(count)
